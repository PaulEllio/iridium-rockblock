# 0 "../Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Src/usbd_hid.c"
# 1 "C:/1Modini/code/iridium-rockblock-master/Debug//"
# 0 "<built-in>"
#define __STDC__ 1
# 0 "<built-in>"
#define __STDC_VERSION__ 201112L
# 0 "<built-in>"
#define __STDC_UTF_16__ 1
# 0 "<built-in>"
#define __STDC_UTF_32__ 1
# 0 "<built-in>"
#define __STDC_HOSTED__ 1
# 0 "<built-in>"
#define __GNUC__ 12
# 0 "<built-in>"
#define __GNUC_MINOR__ 3
# 0 "<built-in>"
#define __GNUC_PATCHLEVEL__ 1
# 0 "<built-in>"
#define __VERSION__ "12.3.1 20230626"
# 0 "<built-in>"
#define __ATOMIC_RELAXED 0
# 0 "<built-in>"
#define __ATOMIC_SEQ_CST 5
# 0 "<built-in>"
#define __ATOMIC_ACQUIRE 2
# 0 "<built-in>"
#define __ATOMIC_RELEASE 3
# 0 "<built-in>"
#define __ATOMIC_ACQ_REL 4
# 0 "<built-in>"
#define __ATOMIC_CONSUME 1
# 0 "<built-in>"
#define __OPTIMIZE_SIZE__ 1
# 0 "<built-in>"
#define __OPTIMIZE__ 1
# 0 "<built-in>"
#define __FINITE_MATH_ONLY__ 0
# 0 "<built-in>"
#define __SIZEOF_INT__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_SHORT__ 2
# 0 "<built-in>"
#define __SIZEOF_FLOAT__ 4
# 0 "<built-in>"
#define __SIZEOF_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_SIZE_T__ 4
# 0 "<built-in>"
#define __CHAR_BIT__ 8
# 0 "<built-in>"
#define __BIGGEST_ALIGNMENT__ 8
# 0 "<built-in>"
#define __ORDER_LITTLE_ENDIAN__ 1234
# 0 "<built-in>"
#define __ORDER_BIG_ENDIAN__ 4321
# 0 "<built-in>"
#define __ORDER_PDP_ENDIAN__ 3412
# 0 "<built-in>"
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __SIZEOF_POINTER__ 4
# 0 "<built-in>"
#define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
# 0 "<built-in>"
#define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-32LE"
# 0 "<built-in>"
#define __SIZE_TYPE__ unsigned int
# 0 "<built-in>"
#define __PTRDIFF_TYPE__ int
# 0 "<built-in>"
#define __WCHAR_TYPE__ unsigned int
# 0 "<built-in>"
#define __WINT_TYPE__ unsigned int
# 0 "<built-in>"
#define __INTMAX_TYPE__ long long int
# 0 "<built-in>"
#define __UINTMAX_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __CHAR16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __CHAR32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __SIG_ATOMIC_TYPE__ int
# 0 "<built-in>"
#define __INT8_TYPE__ signed char
# 0 "<built-in>"
#define __INT16_TYPE__ short int
# 0 "<built-in>"
#define __INT32_TYPE__ long int
# 0 "<built-in>"
#define __INT64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_LEAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_LEAST16_TYPE__ short int
# 0 "<built-in>"
#define __INT_LEAST32_TYPE__ long int
# 0 "<built-in>"
#define __INT_LEAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_LEAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_LEAST16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT_LEAST32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT_LEAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_FAST8_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST16_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST32_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_FAST8_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST16_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INTPTR_TYPE__ int
# 0 "<built-in>"
#define __UINTPTR_TYPE__ unsigned int
# 0 "<built-in>"
#define __GXX_ABI_VERSION 1017
# 0 "<built-in>"
#define __SCHAR_MAX__ 0x7f
# 0 "<built-in>"
#define __SHRT_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __LONG_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __WCHAR_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __WCHAR_MIN__ 0U
# 0 "<built-in>"
#define __WINT_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __WINT_MIN__ 0U
# 0 "<built-in>"
#define __PTRDIFF_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIZE_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __SCHAR_WIDTH__ 8
# 0 "<built-in>"
#define __SHRT_WIDTH__ 16
# 0 "<built-in>"
#define __INT_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_LONG_WIDTH__ 64
# 0 "<built-in>"
#define __WCHAR_WIDTH__ 32
# 0 "<built-in>"
#define __WINT_WIDTH__ 32
# 0 "<built-in>"
#define __PTRDIFF_WIDTH__ 32
# 0 "<built-in>"
#define __SIZE_WIDTH__ 32
# 0 "<built-in>"
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INTMAX_C(c) c ## LL
# 0 "<built-in>"
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __UINTMAX_C(c) c ## ULL
# 0 "<built-in>"
#define __INTMAX_WIDTH__ 64
# 0 "<built-in>"
#define __SIG_ATOMIC_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
# 0 "<built-in>"
#define __SIG_ATOMIC_WIDTH__ 32
# 0 "<built-in>"
#define __INT8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT32_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __INT64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __UINT8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT32_MAX__ 0xffffffffUL
# 0 "<built-in>"
#define __UINT64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INT_LEAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT8_C(c) c
# 0 "<built-in>"
#define __INT_LEAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_LEAST16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT16_C(c) c
# 0 "<built-in>"
#define __INT_LEAST16_WIDTH__ 16
# 0 "<built-in>"
#define __INT_LEAST32_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __INT32_C(c) c ## L
# 0 "<built-in>"
#define __INT_LEAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT64_C(c) c ## LL
# 0 "<built-in>"
#define __INT_LEAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_LEAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT8_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT16_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST32_MAX__ 0xffffffffUL
# 0 "<built-in>"
#define __UINT32_C(c) c ## UL
# 0 "<built-in>"
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __UINT64_C(c) c ## ULL
# 0 "<built-in>"
#define __INT_FAST8_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST8_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST16_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST16_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT_FAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_FAST8_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST16_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INTPTR_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INTPTR_WIDTH__ 32
# 0 "<built-in>"
#define __UINTPTR_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __GCC_IEC_559 0
# 0 "<built-in>"
#define __GCC_IEC_559_COMPLEX 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
# 0 "<built-in>"
#define __DEC_EVAL_METHOD__ 2
# 0 "<built-in>"
#define __FLT_RADIX__ 2
# 0 "<built-in>"
#define __FLT_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT_DIG__ 6
# 0 "<built-in>"
#define __FLT_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT_MAX__ 3.4028234663852886e+38F
# 0 "<built-in>"
#define __FLT_NORM_MAX__ 3.4028234663852886e+38F
# 0 "<built-in>"
#define __FLT_MIN__ 1.1754943508222875e-38F
# 0 "<built-in>"
#define __FLT_EPSILON__ 1.1920928955078125e-7F
# 0 "<built-in>"
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
# 0 "<built-in>"
#define __FLT_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FP_FAST_FMAF 1
# 0 "<built-in>"
#define __FLT_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __DBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __DBL_DIG__ 15
# 0 "<built-in>"
#define __DBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __DBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __DBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __DBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
# 0 "<built-in>"
#define __DBL_NORM_MAX__ ((double)1.7976931348623157e+308L)
# 0 "<built-in>"
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
# 0 "<built-in>"
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
# 0 "<built-in>"
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
# 0 "<built-in>"
#define __DBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __DBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __DBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __DBL_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __LDBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __LDBL_DIG__ 15
# 0 "<built-in>"
#define __LDBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __LDBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __LDBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __LDBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __LDBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __LDBL_MAX__ 1.7976931348623157e+308L
# 0 "<built-in>"
#define __LDBL_NORM_MAX__ 1.7976931348623157e+308L
# 0 "<built-in>"
#define __LDBL_MIN__ 2.2250738585072014e-308L
# 0 "<built-in>"
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
# 0 "<built-in>"
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
# 0 "<built-in>"
#define __LDBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __LDBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __LDBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __LDBL_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT32_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT32_DIG__ 6
# 0 "<built-in>"
#define __FLT32_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT32_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT32_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT32_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT32_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT32_MAX__ 3.4028234663852886e+38F32
# 0 "<built-in>"
#define __FLT32_NORM_MAX__ 3.4028234663852886e+38F32
# 0 "<built-in>"
#define __FLT32_MIN__ 1.1754943508222875e-38F32
# 0 "<built-in>"
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
# 0 "<built-in>"
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
# 0 "<built-in>"
#define __FLT32_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FP_FAST_FMAF32 1
# 0 "<built-in>"
#define __FLT32_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT64_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT64_DIG__ 15
# 0 "<built-in>"
#define __FLT64_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT64_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT64_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT64_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT64_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT64_MAX__ 1.7976931348623157e+308F64
# 0 "<built-in>"
#define __FLT64_NORM_MAX__ 1.7976931348623157e+308F64
# 0 "<built-in>"
#define __FLT64_MIN__ 2.2250738585072014e-308F64
# 0 "<built-in>"
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
# 0 "<built-in>"
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
# 0 "<built-in>"
#define __FLT64_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT32X_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT32X_DIG__ 15
# 0 "<built-in>"
#define __FLT32X_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT32X_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT32X_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT32X_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT32X_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
# 0 "<built-in>"
#define __FLT32X_NORM_MAX__ 1.7976931348623157e+308F32x
# 0 "<built-in>"
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
# 0 "<built-in>"
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
# 0 "<built-in>"
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
# 0 "<built-in>"
#define __FLT32X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32X_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __SFRACT_FBIT__ 7
# 0 "<built-in>"
#define __SFRACT_IBIT__ 0
# 0 "<built-in>"
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
# 0 "<built-in>"
#define __SFRACT_MAX__ 0X7FP-7HR
# 0 "<built-in>"
#define __SFRACT_EPSILON__ 0x1P-7HR
# 0 "<built-in>"
#define __USFRACT_FBIT__ 8
# 0 "<built-in>"
#define __USFRACT_IBIT__ 0
# 0 "<built-in>"
#define __USFRACT_MIN__ 0.0UHR
# 0 "<built-in>"
#define __USFRACT_MAX__ 0XFFP-8UHR
# 0 "<built-in>"
#define __USFRACT_EPSILON__ 0x1P-8UHR
# 0 "<built-in>"
#define __FRACT_FBIT__ 15
# 0 "<built-in>"
#define __FRACT_IBIT__ 0
# 0 "<built-in>"
#define __FRACT_MIN__ (-0.5R-0.5R)
# 0 "<built-in>"
#define __FRACT_MAX__ 0X7FFFP-15R
# 0 "<built-in>"
#define __FRACT_EPSILON__ 0x1P-15R
# 0 "<built-in>"
#define __UFRACT_FBIT__ 16
# 0 "<built-in>"
#define __UFRACT_IBIT__ 0
# 0 "<built-in>"
#define __UFRACT_MIN__ 0.0UR
# 0 "<built-in>"
#define __UFRACT_MAX__ 0XFFFFP-16UR
# 0 "<built-in>"
#define __UFRACT_EPSILON__ 0x1P-16UR
# 0 "<built-in>"
#define __LFRACT_FBIT__ 31
# 0 "<built-in>"
#define __LFRACT_IBIT__ 0
# 0 "<built-in>"
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
# 0 "<built-in>"
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
# 0 "<built-in>"
#define __LFRACT_EPSILON__ 0x1P-31LR
# 0 "<built-in>"
#define __ULFRACT_FBIT__ 32
# 0 "<built-in>"
#define __ULFRACT_IBIT__ 0
# 0 "<built-in>"
#define __ULFRACT_MIN__ 0.0ULR
# 0 "<built-in>"
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
# 0 "<built-in>"
#define __ULFRACT_EPSILON__ 0x1P-32ULR
# 0 "<built-in>"
#define __LLFRACT_FBIT__ 63
# 0 "<built-in>"
#define __LLFRACT_IBIT__ 0
# 0 "<built-in>"
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
# 0 "<built-in>"
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
# 0 "<built-in>"
#define __LLFRACT_EPSILON__ 0x1P-63LLR
# 0 "<built-in>"
#define __ULLFRACT_FBIT__ 64
# 0 "<built-in>"
#define __ULLFRACT_IBIT__ 0
# 0 "<built-in>"
#define __ULLFRACT_MIN__ 0.0ULLR
# 0 "<built-in>"
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
# 0 "<built-in>"
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
# 0 "<built-in>"
#define __SACCUM_FBIT__ 7
# 0 "<built-in>"
#define __SACCUM_IBIT__ 8
# 0 "<built-in>"
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
# 0 "<built-in>"
#define __SACCUM_MAX__ 0X7FFFP-7HK
# 0 "<built-in>"
#define __SACCUM_EPSILON__ 0x1P-7HK
# 0 "<built-in>"
#define __USACCUM_FBIT__ 8
# 0 "<built-in>"
#define __USACCUM_IBIT__ 8
# 0 "<built-in>"
#define __USACCUM_MIN__ 0.0UHK
# 0 "<built-in>"
#define __USACCUM_MAX__ 0XFFFFP-8UHK
# 0 "<built-in>"
#define __USACCUM_EPSILON__ 0x1P-8UHK
# 0 "<built-in>"
#define __ACCUM_FBIT__ 15
# 0 "<built-in>"
#define __ACCUM_IBIT__ 16
# 0 "<built-in>"
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
# 0 "<built-in>"
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
# 0 "<built-in>"
#define __ACCUM_EPSILON__ 0x1P-15K
# 0 "<built-in>"
#define __UACCUM_FBIT__ 16
# 0 "<built-in>"
#define __UACCUM_IBIT__ 16
# 0 "<built-in>"
#define __UACCUM_MIN__ 0.0UK
# 0 "<built-in>"
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
# 0 "<built-in>"
#define __UACCUM_EPSILON__ 0x1P-16UK
# 0 "<built-in>"
#define __LACCUM_FBIT__ 31
# 0 "<built-in>"
#define __LACCUM_IBIT__ 32
# 0 "<built-in>"
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
# 0 "<built-in>"
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
# 0 "<built-in>"
#define __LACCUM_EPSILON__ 0x1P-31LK
# 0 "<built-in>"
#define __ULACCUM_FBIT__ 32
# 0 "<built-in>"
#define __ULACCUM_IBIT__ 32
# 0 "<built-in>"
#define __ULACCUM_MIN__ 0.0ULK
# 0 "<built-in>"
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
# 0 "<built-in>"
#define __ULACCUM_EPSILON__ 0x1P-32ULK
# 0 "<built-in>"
#define __LLACCUM_FBIT__ 31
# 0 "<built-in>"
#define __LLACCUM_IBIT__ 32
# 0 "<built-in>"
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
# 0 "<built-in>"
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
# 0 "<built-in>"
#define __LLACCUM_EPSILON__ 0x1P-31LLK
# 0 "<built-in>"
#define __ULLACCUM_FBIT__ 32
# 0 "<built-in>"
#define __ULLACCUM_IBIT__ 32
# 0 "<built-in>"
#define __ULLACCUM_MIN__ 0.0ULLK
# 0 "<built-in>"
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
# 0 "<built-in>"
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
# 0 "<built-in>"
#define __QQ_FBIT__ 7
# 0 "<built-in>"
#define __QQ_IBIT__ 0
# 0 "<built-in>"
#define __HQ_FBIT__ 15
# 0 "<built-in>"
#define __HQ_IBIT__ 0
# 0 "<built-in>"
#define __SQ_FBIT__ 31
# 0 "<built-in>"
#define __SQ_IBIT__ 0
# 0 "<built-in>"
#define __DQ_FBIT__ 63
# 0 "<built-in>"
#define __DQ_IBIT__ 0
# 0 "<built-in>"
#define __TQ_FBIT__ 127
# 0 "<built-in>"
#define __TQ_IBIT__ 0
# 0 "<built-in>"
#define __UQQ_FBIT__ 8
# 0 "<built-in>"
#define __UQQ_IBIT__ 0
# 0 "<built-in>"
#define __UHQ_FBIT__ 16
# 0 "<built-in>"
#define __UHQ_IBIT__ 0
# 0 "<built-in>"
#define __USQ_FBIT__ 32
# 0 "<built-in>"
#define __USQ_IBIT__ 0
# 0 "<built-in>"
#define __UDQ_FBIT__ 64
# 0 "<built-in>"
#define __UDQ_IBIT__ 0
# 0 "<built-in>"
#define __UTQ_FBIT__ 128
# 0 "<built-in>"
#define __UTQ_IBIT__ 0
# 0 "<built-in>"
#define __HA_FBIT__ 7
# 0 "<built-in>"
#define __HA_IBIT__ 8
# 0 "<built-in>"
#define __SA_FBIT__ 15
# 0 "<built-in>"
#define __SA_IBIT__ 16
# 0 "<built-in>"
#define __DA_FBIT__ 31
# 0 "<built-in>"
#define __DA_IBIT__ 32
# 0 "<built-in>"
#define __TA_FBIT__ 63
# 0 "<built-in>"
#define __TA_IBIT__ 64
# 0 "<built-in>"
#define __UHA_FBIT__ 8
# 0 "<built-in>"
#define __UHA_IBIT__ 8
# 0 "<built-in>"
#define __USA_FBIT__ 16
# 0 "<built-in>"
#define __USA_IBIT__ 16
# 0 "<built-in>"
#define __UDA_FBIT__ 32
# 0 "<built-in>"
#define __UDA_IBIT__ 32
# 0 "<built-in>"
#define __UTA_FBIT__ 64
# 0 "<built-in>"
#define __UTA_IBIT__ 64
# 0 "<built-in>"
#define __REGISTER_PREFIX__ 
# 0 "<built-in>"
#define __USER_LABEL_PREFIX__ 
# 0 "<built-in>"
#define __GNUC_STDC_INLINE__ 1
# 0 "<built-in>"
#define __CHAR_UNSIGNED__ 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
# 0 "<built-in>"
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_INT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
# 0 "<built-in>"
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
# 0 "<built-in>"
#define __GCC_DESTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_CONSTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
# 0 "<built-in>"
#define __HAVE_SPECULATION_SAFE_VALUE 1
# 0 "<built-in>"
#define __GCC_HAVE_DWARF2_CFI_ASM 1
# 0 "<built-in>"
#define __PRAGMA_REDEFINE_EXTNAME 1
# 0 "<built-in>"
#define __SIZEOF_WCHAR_T__ 4
# 0 "<built-in>"
#define __SIZEOF_WINT_T__ 4
# 0 "<built-in>"
#define __SIZEOF_PTRDIFF_T__ 4
# 0 "<built-in>"
#define __ARM_FEATURE_DSP 1
# 0 "<built-in>"
#define __ARM_FEATURE_QBIT 1
# 0 "<built-in>"
#define __ARM_FEATURE_SAT 1
# 0 "<built-in>"
#undef __ARM_FEATURE_CRYPTO
# 0 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
# 0 "<built-in>"
#undef __ARM_FEATURE_QRDMX
# 0 "<built-in>"
#undef __ARM_FEATURE_CRC32
# 0 "<built-in>"
#undef __ARM_FEATURE_DOTPROD
# 0 "<built-in>"
#undef __ARM_FEATURE_COMPLEX
# 0 "<built-in>"
#define __ARM_32BIT_STATE 1
# 0 "<built-in>"
#undef __ARM_FEATURE_MVE
# 0 "<built-in>"
#undef __ARM_FEATURE_CMSE
# 0 "<built-in>"
#undef __ARM_FEATURE_LDREX
# 0 "<built-in>"
#define __ARM_FEATURE_LDREX 7
# 0 "<built-in>"
#define __ARM_FEATURE_CLZ 1
# 0 "<built-in>"
#undef __ARM_FEATURE_NUMERIC_MAXMIN
# 0 "<built-in>"
#define __ARM_FEATURE_SIMD32 1
# 0 "<built-in>"
#define __ARM_SIZEOF_MINIMAL_ENUM 1
# 0 "<built-in>"
#define __ARM_SIZEOF_WCHAR_T 4
# 0 "<built-in>"
#undef __ARM_ARCH_PROFILE
# 0 "<built-in>"
#define __ARM_ARCH_PROFILE 77
# 0 "<built-in>"
#define __arm__ 1
# 0 "<built-in>"
#undef __ARM_ARCH
# 0 "<built-in>"
#define __ARM_ARCH 7
# 0 "<built-in>"
#define __APCS_32__ 1
# 0 "<built-in>"
#define __GCC_ASM_FLAG_OUTPUTS__ 1
# 0 "<built-in>"
#define __thumb__ 1
# 0 "<built-in>"
#define __thumb2__ 1
# 0 "<built-in>"
#define __THUMBEL__ 1
# 0 "<built-in>"
#undef __ARM_ARCH_ISA_THUMB
# 0 "<built-in>"
#define __ARM_ARCH_ISA_THUMB 2
# 0 "<built-in>"
#define __ARMEL__ 1
# 0 "<built-in>"
#define __VFP_FP__ 1
# 0 "<built-in>"
#undef __ARM_FP
# 0 "<built-in>"
#define __ARM_FP 4
# 0 "<built-in>"
#undef __ARM_FP16_FORMAT_IEEE
# 0 "<built-in>"
#undef __ARM_FP16_FORMAT_ALTERNATIVE
# 0 "<built-in>"
#undef __ARM_FP16_ARGS
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_FML
# 0 "<built-in>"
#define __ARM_FEATURE_FMA 1
# 0 "<built-in>"
#undef __ARM_NEON__
# 0 "<built-in>"
#undef __ARM_NEON
# 0 "<built-in>"
#undef __ARM_NEON_FP
# 0 "<built-in>"
#define __THUMB_INTERWORK__ 1
# 0 "<built-in>"
#define __ARM_ARCH_7EM__ 1
# 0 "<built-in>"
#define __ARM_PCS_VFP 1
# 0 "<built-in>"
#define __ARM_EABI__ 1
# 0 "<built-in>"
#undef __FDPIC__
# 0 "<built-in>"
#define __ARM_ARCH_EXT_IDIV__ 1
# 0 "<built-in>"
#define __ARM_FEATURE_IDIV 1
# 0 "<built-in>"
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
# 0 "<built-in>"
#undef __ARM_FEATURE_COPROC
# 0 "<built-in>"
#define __ARM_FEATURE_COPROC 15
# 0 "<built-in>"
#undef __ARM_FEATURE_CDE
# 0 "<built-in>"
#undef __ARM_FEATURE_CDE_COPROC
# 0 "<built-in>"
#undef __ARM_FEATURE_MATMUL_INT8
# 0 "<built-in>"
#undef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_BF16_FORMAT_ALTERNATIVE
# 0 "<built-in>"
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
# 0 "<built-in>"
#define __ELF__ 1
# 0 "<command-line>"
#define __USES_INITFINI__ 1
# 0 "<command-line>"
#define VECT_TAB_OFFSET 0x0
# 0 "<command-line>"
#define USE_FULL_LL_DRIVER 1
# 0 "<command-line>"
#define NDEBUG 1
# 0 "<command-line>"
#define STM32U5xx 1
# 0 "<command-line>"
#define ARDUINO 10607
# 0 "<command-line>"
#define ARDUINO_GENERIC_U545AGIXQ 1
# 0 "<command-line>"
#define ARDUINO_ARCH_STM32 1
# 0 "<command-line>"
#define BOARD_NAME GENERIC_U545AGIXQ
# 0 "<command-line>"
#define VARIANT_H variant_generic.h
# 0 "<command-line>"
#define STM32U545xx 1
# 0 "<command-line>"
#define HAL_UART_MODULE_ENABLED 1
# 1 "../Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Src/usbd_hid.c"
/**
  ******************************************************************************
  * @file    usbd_hid.c
  * @author  MCD Application Team
  * @brief   This file provides the HID core functions.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  * @verbatim
  *
  *          ===================================================================
  *                                HID Class  Description
  *          ===================================================================
  *           This module manages the HID class V1.11 following the "Device Class Definition
  *           for Human Interface Devices (HID) Version 1.11 Jun 27, 2001".
  *           This driver implements the following aspects of the specification:
  *             - The Boot Interface Subclass
  *             - The Mouse protocol
  *             - Usage Page : Generic Desktop
  *             - Usage : Joystick
  *             - Collection : Application
  *
  * @note     In HS mode and when the DMA is used, all variables and data structures
  *           dealing with the DMA during the transaction process should be 32-bit aligned.
  *
  *
  *  @endverbatim
  *
  ******************************************************************************
  */

/* BSPDependencies
- "stm32xxxxx_{eval}{discovery}{nucleo_144}.c"
- "stm32xxxxx_{eval}{discovery}_io.c"
EndBSPDependencies */

/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Inc/usbd_hid.h" 1
/**
  ******************************************************************************
  * @file    usbd_hid.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_hid_core.c file.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USB_HID_H 





/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h" 1
/**
  ******************************************************************************
  * @file    usbd_ioreq.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_ioreq.c file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USBD_IOREQ_H 





/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h" 1
/**
  ******************************************************************************
  * @file    usbd_def.h
  * @author  MCD Application Team
  * @brief   General defines for the usb device library
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USBD_DEF_H 





/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/cores/arduino/stm32/usb/usbd_conf.h" 1
/**
  ******************************************************************************
  * @file    usbd_conf.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_conf.c file
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                      www.st.com/SLA0044
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USBD_CONF_H 
# 320 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/cores/arduino/stm32/usb/usbd_conf.h"
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
# 29 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h" 2

/** @addtogroup STM32_USBD_DEVICE_LIBRARY
  * @{
  */

/** @defgroup USB_DEF
  * @brief general defines for the usb device library file
  * @{
  */

/** @defgroup USB_DEF_Exported_Defines
  * @{
  */


#define NULL 0U



#define USBD_MAX_NUM_INTERFACES 1U



#define USBD_MAX_NUM_CONFIGURATION 1U
# 61 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
#define USBD_MAX_SUPPORTED_CLASS 1U




#define USBD_MAX_CLASS_ENDPOINTS 5U



#define USBD_MAX_CLASS_INTERFACES 5U



#define USBD_LPM_ENABLED 0U



#define USBD_SELF_POWERED 1U



#define USBD_MAX_POWER 0x32U /* 100 mA */



#define USBD_SUPPORT_USER_STRING_DESC 0U



#define USBD_CLASS_USER_STRING_DESC 0U


#define USB_LEN_DEV_QUALIFIER_DESC 0x0AU
#define USB_LEN_DEV_DESC 0x12U
#define USB_LEN_CFG_DESC 0x09U
#define USB_LEN_IF_DESC 0x09U
#define USB_LEN_EP_DESC 0x07U
#define USB_LEN_OTG_DESC 0x03U
#define USB_LEN_LANGID_STR_DESC 0x04U
#define USB_LEN_OTHER_SPEED_DESC_SIZ 0x09U

#define USBD_IDX_LANGID_STR 0x00U
#define USBD_IDX_MFC_STR 0x01U
#define USBD_IDX_PRODUCT_STR 0x02U
#define USBD_IDX_SERIAL_STR 0x03U
#define USBD_IDX_CONFIG_STR 0x04U
#define USBD_IDX_INTERFACE_STR 0x05U

#define USB_REQ_TYPE_STANDARD 0x00U
#define USB_REQ_TYPE_CLASS 0x20U
#define USB_REQ_TYPE_VENDOR 0x40U
#define USB_REQ_TYPE_MASK 0x60U

#define USB_REQ_RECIPIENT_DEVICE 0x00U
#define USB_REQ_RECIPIENT_INTERFACE 0x01U
#define USB_REQ_RECIPIENT_ENDPOINT 0x02U
#define USB_REQ_RECIPIENT_MASK 0x03U

#define USB_REQ_GET_STATUS 0x00U
#define USB_REQ_CLEAR_FEATURE 0x01U
#define USB_REQ_SET_FEATURE 0x03U
#define USB_REQ_SET_ADDRESS 0x05U
#define USB_REQ_GET_DESCRIPTOR 0x06U
#define USB_REQ_SET_DESCRIPTOR 0x07U
#define USB_REQ_GET_CONFIGURATION 0x08U
#define USB_REQ_SET_CONFIGURATION 0x09U
#define USB_REQ_GET_INTERFACE 0x0AU
#define USB_REQ_SET_INTERFACE 0x0BU
#define USB_REQ_SYNCH_FRAME 0x0CU

#define USB_DESC_TYPE_DEVICE 0x01U
#define USB_DESC_TYPE_CONFIGURATION 0x02U
#define USB_DESC_TYPE_STRING 0x03U
#define USB_DESC_TYPE_INTERFACE 0x04U
#define USB_DESC_TYPE_ENDPOINT 0x05U
#define USB_DESC_TYPE_DEVICE_QUALIFIER 0x06U
#define USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION 0x07U
#define USB_DESC_TYPE_IAD 0x0BU
#define USB_DESC_TYPE_BOS 0x0FU

#define USB_CONFIG_REMOTE_WAKEUP 0x02U
#define USB_CONFIG_SELF_POWERED 0x01U

#define USB_FEATURE_EP_HALT 0x00U
#define USB_FEATURE_REMOTE_WAKEUP 0x01U
#define USB_FEATURE_TEST_MODE 0x02U

#define USB_DEVICE_CAPABITY_TYPE 0x10U

#define USB_CONF_DESC_SIZE 0x09U
#define USB_IF_DESC_SIZE 0x09U
#define USB_EP_DESC_SIZE 0x07U
#define USB_IAD_DESC_SIZE 0x08U

#define USB_HS_MAX_PACKET_SIZE 512U
#define USB_FS_MAX_PACKET_SIZE 64U
#define USB_MAX_EP0_SIZE 64U

/*  Device Status */
#define USBD_STATE_DEFAULT 0x01U
#define USBD_STATE_ADDRESSED 0x02U
#define USBD_STATE_CONFIGURED 0x03U
#define USBD_STATE_SUSPENDED 0x04U


/*  EP0 State */
#define USBD_EP0_IDLE 0x00U
#define USBD_EP0_SETUP 0x01U
#define USBD_EP0_DATA_IN 0x02U
#define USBD_EP0_DATA_OUT 0x03U
#define USBD_EP0_STATUS_IN 0x04U
#define USBD_EP0_STATUS_OUT 0x05U
#define USBD_EP0_STALL 0x06U

#define USBD_EP_TYPE_CTRL 0x00U
#define USBD_EP_TYPE_ISOC 0x01U
#define USBD_EP_TYPE_BULK 0x02U
#define USBD_EP_TYPE_INTR 0x03U
# 188 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
/**
  * @}
  */


/** @defgroup USBD_DEF_Exported_TypesDefinitions
  * @{
  */

typedef struct usb_setup_req
{
  uint8_t bmRequest;
  uint8_t bRequest;
  uint16_t wValue;
  uint16_t wIndex;
  uint16_t wLength;
} USBD_SetupReqTypedef;

typedef struct
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t wTotalLength;
  uint8_t bNumInterfaces;
  uint8_t bConfigurationValue;
  uint8_t iConfiguration;
  uint8_t bmAttributes;
  uint8_t bMaxPower;
} __PACKED USBD_ConfigDescTypeDef;

typedef struct
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t wTotalLength;
  uint8_t bNumDeviceCaps;
} USBD_BosDescTypeDef;

typedef struct
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint8_t bEndpointAddress;
  uint8_t bmAttributes;
  uint16_t wMaxPacketSize;
  uint8_t bInterval;
} __PACKED USBD_EpDescTypeDef;

typedef struct
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint8_t bDescriptorSubType;
} USBD_DescHeaderTypeDef;

struct _USBD_HandleTypeDef;

typedef struct _Device_cb
{
  uint8_t (*Init)(struct _USBD_HandleTypeDef *pdev, uint8_t cfgidx);
  uint8_t (*DeInit)(struct _USBD_HandleTypeDef *pdev, uint8_t cfgidx);
  /* Control Endpoints*/
  uint8_t (*Setup)(struct _USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
  uint8_t (*EP0_TxSent)(struct _USBD_HandleTypeDef *pdev);
  uint8_t (*EP0_RxReady)(struct _USBD_HandleTypeDef *pdev);
  /* Class Specific Endpoints*/
  uint8_t (*DataIn)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t (*DataOut)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t (*SOF)(struct _USBD_HandleTypeDef *pdev);
  uint8_t (*IsoINIncomplete)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);
  uint8_t (*IsoOUTIncomplete)(struct _USBD_HandleTypeDef *pdev, uint8_t epnum);

  uint8_t *(*GetHSConfigDescriptor)(uint16_t *length);
  uint8_t *(*GetFSConfigDescriptor)(uint16_t *length);
  uint8_t *(*GetOtherSpeedConfigDescriptor)(uint16_t *length);
  uint8_t *(*GetDeviceQualifierDescriptor)(uint16_t *length);




} USBD_ClassTypeDef;

/* Following USB Device Speed */
typedef enum
{
  USBD_SPEED_HIGH = 0U,
  USBD_SPEED_FULL = 1U,
  USBD_SPEED_LOW = 2U,
} USBD_SpeedTypeDef;

/* Following USB Device status */
typedef enum
{
  USBD_OK = 0U,
  USBD_BUSY,
  USBD_EMEM,
  USBD_FAIL,
} USBD_StatusTypeDef;

/* USB Device descriptors structure */
typedef struct
{
  uint8_t *(*GetDeviceDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetLangIDStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetManufacturerStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetProductStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetSerialStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetConfigurationStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);
  uint8_t *(*GetInterfaceStrDescriptor)(USBD_SpeedTypeDef speed, uint16_t *length);






} USBD_DescriptorsTypeDef;

/* USB Device handle structure */
typedef struct
{
  uint32_t status;
  uint32_t total_length;
  uint32_t rem_length;
  uint32_t maxpacket;
  uint16_t is_used;
  uint16_t bInterval;
} USBD_EndpointTypeDef;
# 359 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
/* USB Device handle structure */
typedef struct _USBD_HandleTypeDef
{
  uint8_t id;
  uint32_t dev_config;
  uint32_t dev_default_config;
  uint32_t dev_config_status;
  USBD_SpeedTypeDef dev_speed;
  USBD_EndpointTypeDef ep_in[16];
  USBD_EndpointTypeDef ep_out[16];
  __IO uint32_t ep0_state;
  uint32_t ep0_data_len;
  __IO uint8_t dev_state;
  __IO uint8_t dev_old_state;
  uint8_t dev_address;
  uint8_t dev_connection_status;
  uint8_t dev_test_mode;
  uint32_t dev_remote_wakeup;
  uint8_t ConfIdx;

  USBD_SetupReqTypedef request;
  USBD_DescriptorsTypeDef *pDesc;
  USBD_ClassTypeDef *pClass[1U];
  void *pClassData;
  void *pClassDataCmsit[1U];
  void *pUserData[1U];
  void *pData;
  void *pBosDesc;
  void *pConfDesc;
  uint32_t classId;
  uint32_t NumClasses;



} USBD_HandleTypeDef;

/* USB Device endpoint direction */
typedef enum
{
  OUT = 0x00,
  IN = 0x80,
} USBD_EPDirectionTypeDef;

typedef enum
{
  NETWORK_CONNECTION = 0x00,
  RESPONSE_AVAILABLE = 0x01,
  CONNECTION_SPEED_CHANGE = 0x2A
} USBD_CDC_NotifCodeTypeDef;
/**
  * @}
  */



/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;

  return _SwapVal;
}


#define LOBYTE(x) ((uint8_t)((x) & 0x00FFU))



#define HIBYTE(x) ((uint8_t)(((x) & 0xFF00U) >> 8U))



#define MIN(a,b) (((a) < (b)) ? (a) : (b))



#define MAX(a,b) (((a) > (b)) ? (a) : (b))




#define __weak __attribute__((weak))


#define __packed __attribute__((__packed__))




/* In HS mode and when the DMA is used, all variables and data structures dealing
   with the DMA during the transaction process should be 4-bytes aligned */



#define __ALIGN_END __attribute__ ((aligned (4U)))


#define __ALIGN_BEGIN 
# 483 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
/**
  * @}
  */

/** @defgroup USBD_DEF_Exported_Variables
  * @{
  */

/**
  * @}
  */

/** @defgroup USBD_DEF_Exported_FunctionsPrototype
  * @{
  */

/**
  * @}
  */







/**
  * @}
  */

/**
  * @}
  */
# 29 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h" 2
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h" 1
/**
  ******************************************************************************
  * @file    usbd_core.h
  * @author  MCD Application Team
  * @brief   Header file for usbd_core.c file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USBD_CORE_H 





/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/cores/arduino/stm32/usb/usbd_conf.h" 1
/**
  ******************************************************************************
  * @file    usbd_conf.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_conf.c file
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                      www.st.com/SLA0044
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
# 320 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/cores/arduino/stm32/usb/usbd_conf.h"
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
# 29 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h" 2
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h" 1
/**
  ******************************************************************************
  * @file    usbd_def.h
  * @author  MCD Application Team
  * @brief   General defines for the usb device library
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
# 509 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
/**
  * @}
  */

/**
  * @}
  */
# 30 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h" 2
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h" 1
/**
  ******************************************************************************
  * @file    usbd_ioreq.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_ioreq.c file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
# 106 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h"
/**
  * @}
  */

/**
  * @}
  */
# 31 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h" 2
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h" 1
/**
  ******************************************************************************
  * @file    usbd_req.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_req.c file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/

#define __USB_REQUEST_H 





/* Includes ------------------------------------------------------------------*/
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h" 1
/**
  ******************************************************************************
  * @file    usbd_def.h
  * @author  MCD Application Team
  * @brief   General defines for the usb device library
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
# 509 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
/**
  * @}
  */

/**
  * @}
  */
# 29 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h" 2


/** @addtogroup STM32_USB_DEVICE_LIBRARY
  * @{
  */

/** @defgroup USBD_REQ
  * @brief header file for the usbd_req.c file
  * @{
  */

/** @defgroup USBD_REQ_Exported_Defines
  * @{
  */
/**
  * @}
  */


/** @defgroup USBD_REQ_Exported_Types
  * @{
  */
/**
  * @}
  */



/** @defgroup USBD_REQ_Exported_Macros
  * @{
  */
/**
  * @}
  */

/** @defgroup USBD_REQ_Exported_Variables
  * @{
  */
/**
  * @}
  */

/** @defgroup USBD_REQ_Exported_FunctionsPrototype
  * @{
  */

USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata);
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len);

/**
  * @}
  */







/**
  * @}
  */

/**
  * @}
  */
# 32 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h" 2

/** @addtogroup STM32_USB_DEVICE_LIBRARY
  * @{
  */

/** @defgroup USBD_CORE
  * @brief This file is the Header file for usbd_core.c file
  * @{
  */


/** @defgroup USBD_CORE_Exported_Defines
  * @{
  */

#define USBD_DEBUG_LEVEL 0U

/**
  * @}
  */


/** @defgroup USBD_CORE_Exported_TypesDefinitions
  * @{
  */


/**
  * @}
  */



/** @defgroup USBD_CORE_Exported_Macros
  * @{
  */

/**
  * @}
  */

/** @defgroup USBD_CORE_Exported_Variables
  * @{
  */
#define USBD_SOF USBD_LL_SOF
/**
  * @}
  */

/** @defgroup USBD_CORE_Exported_FunctionsPrototype
  * @{
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id);
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass);
# 98 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h"
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index);
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index);

USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx);
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx);

USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup);
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata);
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata);

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed);
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev);

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum);
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum);

USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev);

/* USBD Low Level Driver */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev);

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
                                  uint8_t ep_type, uint16_t ep_mps);

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr);
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr);
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr);
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr);
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr);

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
                                    uint8_t *pbuf, uint32_t size);

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
                                          uint8_t *pbuf, uint32_t size);





uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr);
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr);

void USBD_LL_Delay(uint32_t Delay);

void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr);
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr);

/**
  * @}
  */







/**
  * @}
  */

/**
  * @}
  */
# 30 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h" 2

/** @addtogroup STM32_USB_DEVICE_LIBRARY
  * @{
  */

/** @defgroup USBD_IOREQ
  * @brief header file for the usbd_ioreq.c file
  * @{
  */

/** @defgroup USBD_IOREQ_Exported_Defines
  * @{
  */
/**
  * @}
  */


/** @defgroup USBD_IOREQ_Exported_Types
  * @{
  */


/**
  * @}
  */



/** @defgroup USBD_IOREQ_Exported_Macros
  * @{
  */

/**
  * @}
  */

/** @defgroup USBD_IOREQ_Exported_Variables
  * @{
  */

/**
  * @}
  */

/** @defgroup USBD_IOREQ_Exported_FunctionsPrototype
  * @{
  */

USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len);

USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len);

USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len);

USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len);

USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev);
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev);

uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr);

/**
  * @}
  */







/**
  * @}
  */

/**
  * @}
  */
# 29 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Inc/usbd_hid.h" 2

/** @addtogroup STM32_USB_DEVICE_LIBRARY
  * @{
  */

/** @defgroup USBD_HID
  * @brief This file is the Header file for usbd_hid.c
  * @{
  */


/** @defgroup USBD_HID_Exported_Defines
  * @{
  */

#define HID_EPIN_ADDR 0x81U

#define HID_EPIN_SIZE 0x04U

#define USB_HID_CONFIG_DESC_SIZ 34U
#define USB_HID_DESC_SIZ 9U
#define HID_MOUSE_REPORT_DESC_SIZE 74U

#define HID_DESCRIPTOR_TYPE 0x21U
#define HID_REPORT_DESC 0x22U


#define HID_HS_BINTERVAL 0x07U



#define HID_FS_BINTERVAL 0x0AU


#define USBD_HID_REQ_SET_PROTOCOL 0x0BU
#define USBD_HID_REQ_GET_PROTOCOL 0x03U

#define USBD_HID_REQ_SET_IDLE 0x0AU
#define USBD_HID_REQ_GET_IDLE 0x02U

#define USBD_HID_REQ_SET_REPORT 0x09U
#define USBD_HID_REQ_GET_REPORT 0x01U
/**
  * @}
  */


/** @defgroup USBD_CORE_Exported_TypesDefinitions
  * @{
  */
typedef enum
{
  USBD_HID_IDLE = 0,
  USBD_HID_BUSY,
} USBD_HID_StateTypeDef;


typedef struct
{
  uint32_t Protocol;
  uint32_t IdleState;
  uint32_t AltSetting;
  USBD_HID_StateTypeDef state;
} USBD_HID_HandleTypeDef;

/*
 * HID Class specification version 1.1
 * 6.2.1 HID Descriptor
 */

typedef struct
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t bcdHID;
  uint8_t bCountryCode;
  uint8_t bNumDescriptors;
  uint8_t bHIDDescriptorType;
  uint16_t wItemLength;
} __PACKED USBD_HIDDescTypeDef;

/**
  * @}
  */



/** @defgroup USBD_CORE_Exported_Macros
  * @{
  */

/**
  * @}
  */

/** @defgroup USBD_CORE_Exported_Variables
  * @{
  */

extern USBD_ClassTypeDef USBD_HID;
#define USBD_HID_CLASS &USBD_HID
/**
  * @}
  */

/** @defgroup USB_CORE_Exported_Functions
  * @{
  */



uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len);

uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev);

/**
  * @}
  */






/**
  * @}
  */

/**
  * @}
  */
# 48 "../Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Src/usbd_hid.c" 2
# 1 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h" 1
/**
  ******************************************************************************
  * @file    usbd_req.h
  * @author  MCD Application Team
  * @brief   Header file for the usbd_req.c file
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2015 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
# 93 "C:/1Modini/code/iridium-rockblock-master/Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h"
/**
  * @}
  */

/**
  * @}
  */
# 49 "../Src/STMicroelectronics/hardware/stm32/2.7.1/system/Middlewares/ST/STM32_USB_Device_Library/Class/HID/Src/usbd_hid.c" 2


/** @addtogroup STM32_USB_DEVICE_LIBRARY
  * @{
  */


/** @defgroup USBD_HID
  * @brief usbd core module
  * @{
  */

/** @defgroup USBD_HID_Private_TypesDefinitions
  * @{
  */
/**
  * @}
  */


/** @defgroup USBD_HID_Private_Defines
  * @{
  */

/**
  * @}
  */


/** @defgroup USBD_HID_Private_Macros
  * @{
  */
/**
  * @}
  */


/** @defgroup USBD_HID_Private_FunctionPrototypes
  * @{
  */

static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx);
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx);
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum);

static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length);
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length);
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length);
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length);

/**
  * @}
  */

/** @defgroup USBD_HID_Private_Variables
  * @{
  */

USBD_ClassTypeDef USBD_HID =
{
  USBD_HID_Init,
  USBD_HID_DeInit,
  USBD_HID_Setup,
  0U, /* EP0_TxSent */
  0U, /* EP0_RxReady */
  USBD_HID_DataIn, /* DataIn */
  0U, /* DataOut */
  0U, /* SOF */
  0U,
  0U,






  USBD_HID_GetHSCfgDesc,
  USBD_HID_GetFSCfgDesc,
  USBD_HID_GetOtherSpeedCfgDesc,
  USBD_HID_GetDeviceQualifierDesc,

};


/* USB HID device FS Configuration Descriptor */
 static uint8_t USBD_HID_CfgDesc[34U] __attribute__ ((aligned (4U))) =
{
  0x09, /* bLength: Configuration Descriptor size */
  0x02U, /* bDescriptorType: Configuration */
  34U, /* wTotalLength: Bytes returned */
  0x00,
  0x01, /* bNumInterfaces: 1 interface */
  0x01, /* bConfigurationValue: Configuration value */
  0x00, /* iConfiguration: Index of string descriptor
                                                         describing the configuration */

  0xE0, /* bmAttributes: Bus Powered according to user configuration */



  0x32U /* 100 mA */, /* MaxPower (mA) */

  /************** Descriptor of Joystick Mouse interface ****************/
  /* 09 */
  0x09, /* bLength: Interface Descriptor size */
  0x04U, /* bDescriptorType: Interface descriptor type */
  0x00, /* bInterfaceNumber: Number of Interface */
  0x00, /* bAlternateSetting: Alternate setting */
  0x01, /* bNumEndpoints */
  0x03, /* bInterfaceClass: HID */
  0x01, /* bInterfaceSubClass : 1=BOOT, 0=no boot */
  0x02, /* nInterfaceProtocol : 0=none, 1=keyboard, 2=mouse */
  0, /* iInterface: Index of string descriptor */
  /******************** Descriptor of Joystick Mouse HID ********************/
  /* 18 */
  0x09, /* bLength: HID Descriptor size */
  0x21U, /* bDescriptorType: HID */
  0x11, /* bcdHID: HID Class Spec release number */
  0x01,
  0x00, /* bCountryCode: Hardware target country */
  0x01, /* bNumDescriptors: Number of HID class descriptors to follow */
  0x22, /* bDescriptorType */
  74U, /* wItemLength: Total length of Report descriptor */
  0x00,
  /******************** Descriptor of Mouse endpoint ********************/
  /* 27 */
  0x07, /* bLength: Endpoint Descriptor size */
  0x05U, /* bDescriptorType:*/

  0x81U, /* bEndpointAddress: Endpoint Address (IN) */
  0x03, /* bmAttributes: Interrupt endpoint */
  0x04U, /* wMaxPacketSize: 4 Bytes max */
  0x00,
  0x0AU, /* bInterval: Polling Interval */
  /* 34 */
};


/* USB HID device Configuration Descriptor */
 static uint8_t USBD_HID_Desc[9U] __attribute__ ((aligned (4U))) =
{
  /* 18 */
  0x09, /* bLength: HID Descriptor size */
  0x21U, /* bDescriptorType: HID */
  0x11, /* bcdHID: HID Class Spec release number */
  0x01,
  0x00, /* bCountryCode: Hardware target country */
  0x01, /* bNumDescriptors: Number of HID class descriptors to follow */
  0x22, /* bDescriptorType */
  74U, /* wItemLength: Total length of Report descriptor */
  0x00,
};


/* USB Standard Device Descriptor */
 static uint8_t USBD_HID_DeviceQualifierDesc[0x0AU] __attribute__ ((aligned (4U))) =
{
  0x0AU,
  0x06U,
  0x00,
  0x02,
  0x00,
  0x00,
  0x00,
  0x40,
  0x01,
  0x00,
};


 static uint8_t HID_MOUSE_ReportDesc[74U] __attribute__ ((aligned (4U))) =
{
  0x05, 0x01, /* Usage Page (Generic Desktop Ctrls)     */
  0x09, 0x02, /* Usage (Mouse)                          */
  0xA1, 0x01, /* Collection (Application)               */
  0x09, 0x01, /*   Usage (Pointer)                      */
  0xA1, 0x00, /*   Collection (Physical)                */
  0x05, 0x09, /*     Usage Page (Button)                */
  0x19, 0x01, /*     Usage Minimum (0x01)               */
  0x29, 0x03, /*     Usage Maximum (0x03)               */
  0x15, 0x00, /*     Logical Minimum (0)                */
  0x25, 0x01, /*     Logical Maximum (1)                */
  0x95, 0x03, /*     Report Count (3)                   */
  0x75, 0x01, /*     Report Size (1)                    */
  0x81, 0x02, /*     Input (Data,Var,Abs)               */
  0x95, 0x01, /*     Report Count (1)                   */
  0x75, 0x05, /*     Report Size (5)                    */
  0x81, 0x01, /*     Input (Const,Array,Abs)            */
  0x05, 0x01, /*     Usage Page (Generic Desktop Ctrls) */
  0x09, 0x30, /*     Usage (X)                          */
  0x09, 0x31, /*     Usage (Y)                          */
  0x09, 0x38, /*     Usage (Wheel)                      */
  0x15, 0x81, /*     Logical Minimum (-127)             */
  0x25, 0x7F, /*     Logical Maximum (127)              */
  0x75, 0x08, /*     Report Size (8)                    */
  0x95, 0x03, /*     Report Count (3)                   */
  0x81, 0x06, /*     Input (Data,Var,Rel)               */
  0xC0, /*   End Collection                       */
  0x09, 0x3C, /*   Usage (Motion Wakeup)                */
  0x05, 0xFF, /*   Usage Page (Reserved 0xFF)           */
  0x09, 0x01, /*   Usage (0x01)                         */
  0x15, 0x00, /*   Logical Minimum (0)                  */
  0x25, 0x01, /*   Logical Maximum (1)                  */
  0x75, 0x01, /*   Report Size (1)                      */
  0x95, 0x02, /*   Report Count (2)                     */
  0xB1, 0x22, /*   Feature (Data,Var,Abs,NoWrp)         */
  0x75, 0x06, /*   Report Size (6)                      */
  0x95, 0x01, /*   Report Count (1)                     */
  0xB1, 0x01, /*   Feature (Const,Array,Abs,NoWrp)      */
  0xC0 /* End Collection                         */
};

static uint8_t HIDInEpAdd = 0x81U;

/**
  * @}
  */

/** @defgroup USBD_HID_Private_Functions
  * @{
  */

/**
  * @brief  USBD_HID_Init
  *         Initialize the HID interface
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));

  if (hhid == 0U)
  {
    pdev->pClassDataCmsit[pdev->classId] = 0U;
    return (uint8_t)USBD_EMEM;
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];






  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0x07U;
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0x0AU;
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, 0x03U, 0x04U);
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;

  hhid->state = USBD_HID_IDLE;

  return (uint8_t)USBD_OK;
}

/**
  * @brief  USBD_HID_DeInit
  *         DeInitialize the HID layer
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  UNUSED(cfgidx);






  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != 0U)
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
    pdev->pClassDataCmsit[pdev->classId] = 0U;
  }

  return (uint8_t)USBD_OK;
}

/**
  * @brief  USBD_HID_Setup
  *         Handle the HID specific requests
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
  USBD_StatusTypeDef ret = USBD_OK;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;

  if (hhid == 0U)
  {
    return (uint8_t)USBD_FAIL;
  }

  switch (req->bmRequest & 0x60U)
  {
    case 0x20U :
      switch (req->bRequest)
      {
        case 0x0BU:
          hhid->Protocol = (uint8_t)(req->wValue);
          break;

        case 0x03U:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
          break;

        case 0x0AU:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
          break;

        case 0x02U:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
          break;

        default:
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
      }
      break;
    case 0x00U:
      switch (req->bRequest)
      {
        case 0x00U:
          if (pdev->dev_state == 0x03U)
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;

        case 0x06U:
          if ((req->wValue >> 8) == 0x22U)
          {
            len = (((74U) < (req->wLength)) ? (74U) : (req->wLength));
            pbuf = HID_MOUSE_ReportDesc;
          }
          else if ((req->wValue >> 8) == 0x21U)
          {
            pbuf = USBD_HID_Desc;
            len = (((9U) < (req->wLength)) ? (9U) : (req->wLength));
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
          break;

        case 0x0AU :
          if (pdev->dev_state == 0x03U)
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;

        case 0x0BU:
          if (pdev->dev_state == 0x03U)
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;

        case 0x01U:
          break;

        default:
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
      }
      break;

    default:
      USBD_CtlError(pdev, req);
      ret = USBD_FAIL;
      break;
  }

  return (uint8_t)ret;
}


/**
  * @brief  USBD_HID_SendReport
  *         Send HID Report
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @param  ClassId: The Class ID
  * @retval status
  */





uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];


  if (hhid == 0U)
  {
    return (uint8_t)USBD_FAIL;
  }






  if (pdev->dev_state == 0x03U)
  {
    if (hhid->state == USBD_HID_IDLE)
    {
      hhid->state = USBD_HID_BUSY;
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
    }
  }

  return (uint8_t)USBD_OK;
}

/**
  * @brief  USBD_HID_GetPollingInterval
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (0x07U - 1U))) / 8U);
  }
  else /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval = 0x0AU;
  }

  return ((uint32_t)(polling_interval));
}


/**
  * @brief  USBD_HID_GetCfgFSDesc
  *         return FS configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, 0x81U);

  if (pEpDesc != 0U)
  {
    pEpDesc->bInterval = 0x0AU;
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
  return USBD_HID_CfgDesc;
}

/**
  * @brief  USBD_HID_GetCfgHSDesc
  *         return HS configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, 0x81U);

  if (pEpDesc != 0U)
  {
    pEpDesc->bInterval = 0x07U;
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
  return USBD_HID_CfgDesc;
}

/**
  * @brief  USBD_HID_GetOtherSpeedCfgDesc
  *         return other speed configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, 0x81U);

  if (pEpDesc != 0U)
  {
    pEpDesc->bInterval = 0x0AU;
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
  return USBD_HID_CfgDesc;
}


/**
  * @brief  USBD_HID_DataIn
  *         handle data IN Stage
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;

  return (uint8_t)USBD_OK;
}


/**
  * @brief  DeviceQualifierDescriptor
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);

  return USBD_HID_DeviceQualifierDesc;
}

/**
  * @}
  */


/**
  * @}
  */


/**
  * @}
  */
